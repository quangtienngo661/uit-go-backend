// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               v6.33.0
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Role, VehicleType } from "./common";

export const protobufPackage = "authPackage";

export interface LoginRequest {
  email: string;
  password: string;
}

export interface LoginResponse {
  token: string;
}

export interface SignUpUserRequest {
  email: string;
  password: string;
  fullName: string;
  phone: string;
}

export interface SignUpUserResponse {
  userId: string;
}

export interface SignUpDriverRequest {
  email: string;
  password: string;
  fullName: string;
  phone: string;
  licenseNumber: string;
  vehicleType: VehicleType;
  licensePlate: string;
  vehicleModel: string;
  vehicleColor: string;
}

export interface SignUpDriverResponse {
  userId: string;
  driverId: string;
}

export interface ValidateTokenRequest {
  token: string;
}

export interface ValidateTokenResponse {
  valid: boolean;
  userId: string;
  email: string;
  role: Role;
}

export interface LogoutRequest {
  token: string;
}

export interface LogoutResponse {
  success: boolean;
}

export const AUTH_PACKAGE_PACKAGE_NAME = "authPackage";

export interface AuthServiceClient {
  login(request: LoginRequest): Observable<LoginResponse>;

  signUpUser(request: SignUpUserRequest): Observable<SignUpUserResponse>;

  signUpDriver(request: SignUpDriverRequest): Observable<SignUpDriverResponse>;

  validateToken(request: ValidateTokenRequest): Observable<ValidateTokenResponse>;

  logout(request: LogoutRequest): Observable<LogoutResponse>;
}

export interface AuthServiceController {
  login(request: LoginRequest): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  signUpUser(
    request: SignUpUserRequest,
  ): Promise<SignUpUserResponse> | Observable<SignUpUserResponse> | SignUpUserResponse;

  signUpDriver(
    request: SignUpDriverRequest,
  ): Promise<SignUpDriverResponse> | Observable<SignUpDriverResponse> | SignUpDriverResponse;

  validateToken(
    request: ValidateTokenRequest,
  ): Promise<ValidateTokenResponse> | Observable<ValidateTokenResponse> | ValidateTokenResponse;

  logout(request: LogoutRequest): Promise<LogoutResponse> | Observable<LogoutResponse> | LogoutResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["login", "signUpUser", "signUpDriver", "validateToken", "logout"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
