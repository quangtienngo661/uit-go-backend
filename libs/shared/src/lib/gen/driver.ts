// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               v6.33.0
// source: driver.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "driverPackage";

/** dummy data to run the service */
export interface PingRequest {
}

export interface PingResponse {
  message: string;
}

export interface TestRequest {
}

export interface TestResponse {
  message: string;
}

export const DRIVER_PACKAGE_PACKAGE_NAME = "driverPackage";

export interface DriverServiceClient {
  ping(request: PingRequest): Observable<PingResponse>;

  test(request: TestRequest): Observable<TestResponse>;
}

export interface DriverServiceController {
  ping(request: PingRequest): Promise<PingResponse> | Observable<PingResponse> | PingResponse;

  test(request: TestRequest): Promise<TestResponse> | Observable<TestResponse> | TestResponse;
}

export function DriverServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["ping", "test"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("DriverService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("DriverService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const DRIVER_SERVICE_NAME = "DriverService";
